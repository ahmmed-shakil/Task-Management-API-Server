// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  admin
  user
}

enum ProjectStatus {
  planning
  active
  completed
  on_hold
}

enum ProjectPriority {
  low
  medium
  high
  urgent
}

enum TaskStatus {
  todo
  in_progress
  in_review
  completed
}

enum TaskPriority {
  low
  medium
  high
  urgent
}

model User {
  id            String   @id @default(uuid())
  email         String   @unique
  password      String
  firstName     String   @map("first_name")
  lastName      String   @map("last_name")
  avatar        String?
  role          UserRole @default(user)
  isActive      Boolean  @default(true) @map("is_active")
  emailVerified Boolean  @default(false) @map("email_verified")
  lastLogin     DateTime? @map("last_login")
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  // Relations
  ownedProjects     Project[]      @relation("ProjectOwner")
  assignedTasks     Task[]         @relation("TaskAssignee")
  reportedTasks     Task[]         @relation("TaskReporter")
  ledTeams          Team[]         @relation("TeamLeader")
  teamMemberships   TeamMember[]
  notifications     Notification[]
  taskComments      TaskComment[]
  taskAttachments   TaskAttachment[]
  refreshTokens     RefreshToken[]

  @@map("users")
}

model Team {
  id          String   @id @default(uuid())
  name        String
  description String?
  leaderId    String   @map("leader_id")
  isActive    Boolean  @default(true) @map("is_active")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  leader   User         @relation("TeamLeader", fields: [leaderId], references: [id])
  members  TeamMember[]
  projects Project[]

  @@map("teams")
}

model TeamMember {
  id     String @id @default(uuid())
  teamId String @map("team_id")
  userId String @map("user_id")
  role   String @default("member")

  // Relations
  team Team @relation(fields: [teamId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([teamId, userId])
  @@map("team_members")
}

model Project {
  id          String          @id @default(uuid())
  name        String
  description String?
  status      ProjectStatus   @default(planning)
  priority    ProjectPriority @default(medium)
  startDate   DateTime?       @map("start_date")
  endDate     DateTime?       @map("end_date")
  ownerId     String          @map("owner_id")
  teamId      String?         @map("team_id")
  budget      Decimal?        @db.Decimal(10, 2)
  progress    Int             @default(0)
  isActive    Boolean         @default(true) @map("is_active")
  createdAt   DateTime        @default(now()) @map("created_at")
  updatedAt   DateTime        @updatedAt @map("updated_at")

  // Relations
  owner User  @relation("ProjectOwner", fields: [ownerId], references: [id])
  team  Team? @relation(fields: [teamId], references: [id])
  tasks Task[]

  @@map("projects")
}

model Task {
  id             String       @id @default(uuid())
  title          String
  description    String?
  status         TaskStatus   @default(todo)
  priority       TaskPriority @default(medium)
  assigneeId     String?      @map("assignee_id")
  reporterId     String       @map("reporter_id")
  projectId      String       @map("project_id")
  parentTaskId   String?      @map("parent_task_id")
  dueDate        DateTime?    @map("due_date")
  estimatedHours Int?         @map("estimated_hours")
  actualHours    Int?         @map("actual_hours")
  tags           String[]     @default([])
  position       Int          @default(0)
  isArchived     Boolean      @default(false) @map("is_archived")
  createdAt      DateTime     @default(now()) @map("created_at")
  updatedAt      DateTime     @updatedAt @map("updated_at")

  // Relations
  assignee     User?            @relation("TaskAssignee", fields: [assigneeId], references: [id])
  reporter     User             @relation("TaskReporter", fields: [reporterId], references: [id])
  project      Project          @relation(fields: [projectId], references: [id], onDelete: Cascade)
  parentTask   Task?            @relation("TaskHierarchy", fields: [parentTaskId], references: [id])
  subtasks     Task[]           @relation("TaskHierarchy")
  comments     TaskComment[]
  attachments  TaskAttachment[]

  @@map("tasks")
}

model TaskComment {
  id        String   @id @default(uuid())
  taskId    String   @map("task_id")
  userId    String   @map("user_id")
  content   String
  isEdited  Boolean  @default(false) @map("is_edited")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  task Task @relation(fields: [taskId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id])

  @@map("task_comments")
}

model TaskAttachment {
  id           String   @id @default(uuid())
  taskId       String   @map("task_id")
  userId       String   @map("user_id")
  fileName     String   @map("file_name")
  originalName String   @map("original_name")
  filePath     String   @map("file_path")
  fileSize     Int      @map("file_size")
  mimeType     String   @map("mime_type")
  createdAt    DateTime @default(now()) @map("created_at")

  // Relations
  task Task @relation(fields: [taskId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id])

  @@map("task_attachments")
}

model Notification {
  id        String   @id @default(uuid())
  userId    String   @map("user_id")
  type      String
  title     String
  message   String
  data      Json?
  isRead    Boolean  @default(false) @map("is_read")
  createdAt DateTime @default(now()) @map("created_at")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

model RefreshToken {
  id        String   @id @default(uuid())
  userId    String   @unique @map("user_id")
  token     String   @unique
  expiresAt DateTime @map("expires_at")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("refresh_tokens")
}
